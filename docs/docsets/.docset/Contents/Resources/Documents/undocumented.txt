OneWayTransformer.swift
	public init(transform: (I -> O))
	public func transform(val: TypeIn) -> TypeOut
NetworkFetcher.swift
	public enum NetworkFetcherError: Int
	public class NetworkFetcher: CacheLevel
	public init() {}
	public func get(fetchable: KeyType) -> CacheRequest<OutputType>
	public func set(value: NSData, forKey fetchable: NSURL) {}
	public func onMemoryWarning() {}
	public func clear() {}
MemoryCacheLevel.swift
	public protocol ExpensiveObject
	var cost: Int { get }
	public var cost: Int
	public var cost: Int
	public var cost: Int
	public func get(fetchable: KeyType) -> CacheRequest<OutputType>
	public func onMemoryWarning()
	public func set(value: T, forKey fetchable: String)
	public func clear()
BasicCache.swift
	public init(getClosure: (key: A) -> CacheRequest<B>, setClosure: (key: A, value: B) -> Void, clearClosure: () -> Void, memoryClosure: () -> Void)
	public func get(fetchable: KeyType) -> CacheRequest<OutputType>
	public func set(value: B, forKey fetchable: A)
	public func clear()
	public func onMemoryWarning()
DiskCacheLevel.swift
	public class DiskCacheLevel: CacheLevel
	public var capacity: UInt64 = 0
	public func onMemoryWarning() {}
	public func set(value: NSData, forKey fetchable: String)
	public func get(fetchable: KeyType) -> CacheRequest<OutputType>
	public func clear()
TwoWayTransformer.swift
	public init(transform: (I -> O), inverseTransform: (O -> I))
	public func transform(val: I) -> O
	public func inverseTransform(val: O) -> I
Carlos.swift
	public enum FetchError: Int
